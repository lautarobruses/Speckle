{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Igna\\\\Documents\\\\GitHub\\\\Speckle\\\\frontend\\\\src\\\\subirVideos.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport DescriptorSelection from './DescriptorSelection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadVideo = () => {\n  _s();\n  const [defaultValues, setDefaultValues] = useState({});\n  const [descriptorList, setDescriptorList] = useState([]);\n  const [video, setVideo] = useState(null);\n  const [message, setMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [imageUrls, setImageUrls] = useState([]);\n  const [selectedDescriptors, setSelectedDescriptors] = useState({});\n  const [descriptorsVisible, setDescriptorsVisible] = useState(false);\n  const [descriptorParams, setDescriptorParams] = useState({});\n  useEffect(() => {\n    fetch('http://localhost:5000/api/descriptors').then(response => {\n      if (!response.ok) {\n        throw new Error('Error en la red');\n      }\n      return response.json();\n    }).then(data => {\n      setDefaultValues(data.defaultValues);\n      setDescriptorList(data.descriptorList);\n    }).catch(error => {\n      console.error('Error al cargar los descriptores:', error);\n      setMessage('Error al cargar los descriptores.');\n    });\n  }, []);\n  const handleFileChange = event => {\n    setVideo(event.target.files[0]);\n    setDescriptorsVisible(true);\n  };\n  const handleDescriptorChange = event => {\n    const {\n      name,\n      checked\n    } = event.target;\n    setSelectedDescriptors(prev => ({\n      ...prev,\n      [name]: checked\n    }));\n    if (checked && defaultValues[name]) {\n      setDescriptorParams(prev => ({\n        ...prev,\n        [name]: defaultValues[name]\n      }));\n    } else if (!checked) {\n      setDescriptorParams(prev => ({\n        ...prev,\n        [name]: {}\n      }));\n    }\n  };\n  const handleParamChange = (descriptor, param, value) => {\n    setDescriptorParams(prev => ({\n      ...prev,\n      [descriptor]: {\n        ...prev[descriptor],\n        [param]: value\n      }\n    }));\n  };\n  const handleUpload = async () => {\n    if (!video) {\n      setMessage('Por favor, selecciona un video.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('video', video);\n    const descriptors = Object.keys(selectedDescriptors).filter(key => selectedDescriptors[key]);\n    formData.append('descriptors', JSON.stringify(descriptors));\n    formData.append('params', JSON.stringify(descriptorParams));\n    setLoading(true);\n    setMessage('');\n    try {\n      const response = await axios.post('http://localhost:5000/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setMessage(response.data.result);\n      setImageUrls(Array.isArray(response.data.images) ? response.data.images : []);\n    } catch (error) {\n      setMessage('Ha ocurrido un error.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const isAnyDescriptorSelected = Object.values(selectedDescriptors).some(checked => checked);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"video/avi\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), descriptorsVisible && /*#__PURE__*/_jsxDEV(DescriptorSelection, {\n      descriptorList: descriptorList,\n      selectedDescriptors: selectedDescriptors,\n      descriptorParams: descriptorParams,\n      onDescriptorChange: handleDescriptorChange,\n      onParamChange: handleParamChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: loading || !descriptorsVisible || !isAnyDescriptorSelected,\n      children: loading ? 'Cargando...' : 'Enviar Descriptores'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 25\n    }, this), imageUrls.length > 0 && imageUrls.map((image, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: image.descriptor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://localhost:5000${image.url}`,\n        alt: `Mapa de colores generado ${index}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `http://localhost:5000${image.url}`,\n        download: true,\n        children: [\"Descargar imagen de \", image.descriptor]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n};\n_s(UploadVideo, \"YFfqDB7+llF10AI97mv7v0Musco=\");\n_c = UploadVideo;\nexport default UploadVideo;\nvar _c;\n$RefreshReg$(_c, \"UploadVideo\");","map":{"version":3,"names":["React","useEffect","useState","axios","DescriptorSelection","jsxDEV","_jsxDEV","UploadVideo","_s","defaultValues","setDefaultValues","descriptorList","setDescriptorList","video","setVideo","message","setMessage","loading","setLoading","imageUrls","setImageUrls","selectedDescriptors","setSelectedDescriptors","descriptorsVisible","setDescriptorsVisible","descriptorParams","setDescriptorParams","fetch","then","response","ok","Error","json","data","catch","error","console","handleFileChange","event","target","files","handleDescriptorChange","name","checked","prev","handleParamChange","descriptor","param","value","handleUpload","formData","FormData","append","descriptors","Object","keys","filter","key","JSON","stringify","post","headers","result","Array","isArray","images","isAnyDescriptorSelected","values","some","children","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onDescriptorChange","onParamChange","onClick","disabled","length","map","image","index","src","url","alt","href","download","_c","$RefreshReg$"],"sources":["C:/Users/Igna/Documents/GitHub/Speckle/frontend/src/subirVideos.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport DescriptorSelection from './DescriptorSelection';\r\n\r\nconst UploadVideo = () => {\r\n    const [defaultValues, setDefaultValues] = useState({});\r\n    const [descriptorList, setDescriptorList] = useState([]);\r\n    const [video, setVideo] = useState(null);\r\n    const [message, setMessage] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [imageUrls, setImageUrls] = useState([]);\r\n    const [selectedDescriptors, setSelectedDescriptors] = useState({});\r\n    const [descriptorsVisible, setDescriptorsVisible] = useState(false);\r\n    const [descriptorParams, setDescriptorParams] = useState({});\r\n\r\n    useEffect(() => {\r\n        fetch('http://localhost:5000/api/descriptors')\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Error en la red');\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                setDefaultValues(data.defaultValues);\r\n                setDescriptorList(data.descriptorList);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error al cargar los descriptores:', error);\r\n                setMessage('Error al cargar los descriptores.');\r\n            });\r\n    }, []);\r\n\r\n    const handleFileChange = (event) => {\r\n        setVideo(event.target.files[0]);\r\n        setDescriptorsVisible(true);\r\n    };\r\n\r\n    const handleDescriptorChange = (event) => {\r\n        const { name, checked } = event.target;\r\n        setSelectedDescriptors((prev) => ({\r\n            ...prev,\r\n            [name]: checked,\r\n        }));\r\n\r\n        if (checked && defaultValues[name]) {\r\n            setDescriptorParams((prev) => ({\r\n                ...prev,\r\n                [name]: defaultValues[name],\r\n            }));\r\n        } else if (!checked) {\r\n            setDescriptorParams((prev) => ({\r\n                ...prev,\r\n                [name]: {},\r\n            }));\r\n        }\r\n    };\r\n\r\n    const handleParamChange = (descriptor, param, value) => {\r\n        setDescriptorParams((prev) => ({\r\n            ...prev,\r\n            [descriptor]: {\r\n                ...prev[descriptor],\r\n                [param]: value,\r\n            },\r\n        }));\r\n    };\r\n\r\n    const handleUpload = async () => {\r\n        if (!video) {\r\n            setMessage('Por favor, selecciona un video.');\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n        formData.append('video', video);\r\n\r\n        const descriptors = Object.keys(selectedDescriptors).filter(key => selectedDescriptors[key]);\r\n        formData.append('descriptors', JSON.stringify(descriptors));\r\n        formData.append('params', JSON.stringify(descriptorParams));\r\n\r\n        setLoading(true);\r\n        setMessage('');\r\n\r\n        try {\r\n            const response = await axios.post('http://localhost:5000/upload', formData, {\r\n                headers: { 'Content-Type': 'multipart/form-data' },\r\n            });\r\n            setMessage(response.data.result);\r\n            setImageUrls(Array.isArray(response.data.images) ? response.data.images : []);\r\n        } catch (error) {\r\n            setMessage('Ha ocurrido un error.');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const isAnyDescriptorSelected = Object.values(selectedDescriptors).some(checked => checked);\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"file\" accept=\"video/avi\" onChange={handleFileChange} />\r\n            \r\n            {descriptorsVisible && (\r\n                <DescriptorSelection \r\n                    descriptorList={descriptorList} \r\n                    selectedDescriptors={selectedDescriptors}\r\n                    descriptorParams={descriptorParams}\r\n                    onDescriptorChange={handleDescriptorChange}\r\n                    onParamChange={handleParamChange}\r\n                />\r\n            )}\r\n\r\n            <button onClick={handleUpload} disabled={loading || !descriptorsVisible || !isAnyDescriptorSelected}>\r\n                {loading ? 'Cargando...' : 'Enviar Descriptores'}\r\n            </button>\r\n\r\n            {message && <p>{message}</p>}\r\n            {imageUrls.length > 0 && imageUrls.map((image, index) => (\r\n                <div key={index}>\r\n                    <h5>{image.descriptor}</h5>\r\n                    <img src={`http://localhost:5000${image.url}`} alt={`Mapa de colores generado ${index}`} />\r\n                    <a href={`http://localhost:5000${image.url}`} download>Descargar imagen de {image.descriptor}</a>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UploadVideo;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}