{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Igna\\\\Documents\\\\GitHub\\\\Speckle\\\\frontend\\\\src\\\\DefaultValuesManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DescriptorSelection from './DescriptorSelection';\nimport Modal from 'react-modal';\n\n// Asegúrate de llamar a Modal.setAppElement en algún lugar para accesibilidad\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement('#root');\nconst DefaultValuesManager = () => {\n  _s();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [defaultValues, setDefaultValues] = useState({});\n  const [descriptorList, setDescriptorList] = useState([]);\n  const [selectedDescriptors, setSelectedDescriptors] = useState({});\n  const [descriptorParams, setDescriptorParams] = useState({});\n  useEffect(() => {\n    fetch('http://localhost:5000/api/descriptors').then(response => {\n      if (!response.ok) {\n        throw new Error('Error en la red');\n      }\n      return response.json();\n    }).then(data => {\n      setDefaultValues(data.defaultValues);\n      setDescriptorList(data.descriptorList);\n    }).catch(error => {\n      console.error('Error al cargar los descriptores:', error);\n    });\n  }, []);\n  const toggleModal = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n  const handleDescriptorChange = event => {\n    const {\n      name,\n      checked\n    } = event.target;\n    setSelectedDescriptors(prev => ({\n      ...prev,\n      [name]: checked\n    }));\n    if (checked && defaultValues[name]) {\n      setDescriptorParams(prev => ({\n        ...prev,\n        [name]: defaultValues[name]\n      }));\n    } else if (!checked) {\n      setDescriptorParams(prev => {\n        const {\n          [name]: _,\n          ...rest\n        } = prev;\n        return rest;\n      });\n    }\n  };\n  const handleParamChange = (descriptor, param, value) => {\n    setDescriptorParams(prev => ({\n      ...prev,\n      [descriptor]: {\n        ...prev[descriptor],\n        [param]: value\n      }\n    }));\n  };\n  const handleSaveDefaultValues = () => {\n    console.log('Datos enviados:', {\n      defaultValues: descriptorParams,\n      descriptorList\n    });\n    fetch('http://localhost:5000/api/descriptors', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        defaultValues: descriptorParams,\n        descriptorList\n      })\n    }).then(response => response.json()).then(data => {\n      console.log('Éxito:', data);\n      toggleModal(); // Cierra el modal después de guardar\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleModal,\n      children: \"Actualizar valores por defecto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: toggleModal,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Modificar valores por defecto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DescriptorSelection, {\n        descriptorList: descriptorList,\n        selectedDescriptors: selectedDescriptors,\n        descriptorParams: descriptorParams,\n        onDescriptorChange: handleDescriptorChange,\n        onParamChange: handleParamChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSaveDefaultValues,\n        children: \"Guardar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleModal,\n        children: \"Cerrar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n};\n_s(DefaultValuesManager, \"uVJBSo0t16RphgTCHMVXXbzw55U=\");\n_c = DefaultValuesManager;\nexport default DefaultValuesManager;\nvar _c;\n$RefreshReg$(_c, \"DefaultValuesManager\");","map":{"version":3,"names":["React","useState","useEffect","DescriptorSelection","Modal","jsxDEV","_jsxDEV","setAppElement","DefaultValuesManager","_s","isModalOpen","setIsModalOpen","defaultValues","setDefaultValues","descriptorList","setDescriptorList","selectedDescriptors","setSelectedDescriptors","descriptorParams","setDescriptorParams","fetch","then","response","ok","Error","json","data","catch","error","console","toggleModal","handleDescriptorChange","event","name","checked","target","prev","_","rest","handleParamChange","descriptor","param","value","handleSaveDefaultValues","log","method","headers","body","JSON","stringify","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","onRequestClose","onDescriptorChange","onParamChange","_c","$RefreshReg$"],"sources":["C:/Users/Igna/Documents/GitHub/Speckle/frontend/src/DefaultValuesManager.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport DescriptorSelection from './DescriptorSelection';\r\nimport Modal from 'react-modal';\r\n\r\n// Asegúrate de llamar a Modal.setAppElement en algún lugar para accesibilidad\r\nModal.setAppElement('#root');\r\n\r\nconst DefaultValuesManager = () => {\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [defaultValues, setDefaultValues] = useState({});\r\n    const [descriptorList, setDescriptorList] = useState([]);\r\n    const [selectedDescriptors, setSelectedDescriptors] = useState({});\r\n    const [descriptorParams, setDescriptorParams] = useState({});\r\n\r\n    useEffect(() => {\r\n        fetch('http://localhost:5000/api/descriptors')\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Error en la red');\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                setDefaultValues(data.defaultValues);\r\n                setDescriptorList(data.descriptorList);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error al cargar los descriptores:', error);\r\n            });\r\n    }, []);\r\n\r\n    const toggleModal = () => {\r\n        setIsModalOpen(!isModalOpen);\r\n    };\r\n\r\n    const handleDescriptorChange = (event) => {\r\n        const { name, checked } = event.target;\r\n        setSelectedDescriptors((prev) => ({\r\n            ...prev,\r\n            [name]: checked,\r\n        }));\r\n\r\n        if (checked && defaultValues[name]) {\r\n            setDescriptorParams((prev) => ({\r\n                ...prev,\r\n                [name]: defaultValues[name],\r\n            }));\r\n        } else if (!checked) {\r\n            setDescriptorParams((prev) => {\r\n                const { [name]: _, ...rest } = prev;\r\n                return rest;\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleParamChange = (descriptor, param, value) => {\r\n        setDescriptorParams((prev) => ({\r\n            ...prev,\r\n            [descriptor]: {\r\n                ...prev[descriptor],\r\n                [param]: value,\r\n            },\r\n        }));\r\n    };\r\n\r\n    const handleSaveDefaultValues = () => {\r\n        console.log('Datos enviados:', { defaultValues: descriptorParams, descriptorList });\r\n\r\n        fetch('http://localhost:5000/api/descriptors', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ defaultValues: descriptorParams, descriptorList }),\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            console.log('Éxito:', data);\r\n            toggleModal(); // Cierra el modal después de guardar\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error:', error);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={toggleModal}>Actualizar valores por defecto</button>\r\n            <Modal isOpen={isModalOpen} onRequestClose={toggleModal}>\r\n                <h2>Modificar valores por defecto</h2>\r\n                <DescriptorSelection \r\n                    descriptorList={descriptorList} \r\n                    selectedDescriptors={selectedDescriptors}\r\n                    descriptorParams={descriptorParams}\r\n                    onDescriptorChange={handleDescriptorChange} \r\n                    onParamChange={handleParamChange} \r\n                />\r\n                <button onClick={handleSaveDefaultValues}>Guardar</button>\r\n                <button onClick={toggleModal}>Cerrar</button>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DefaultValuesManager;\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}