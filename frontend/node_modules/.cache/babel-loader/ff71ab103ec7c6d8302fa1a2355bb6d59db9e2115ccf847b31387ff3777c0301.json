{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Igna\\\\Documents\\\\GitHub\\\\Speckle\\\\frontend\\\\src\\\\DefaultValuesManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport DescriptorSelection from './DescriptorSelection'; // Asegúrate de importar el componente correcto\nimport Modal from 'react-modal';\n\n// Asegúrate de llamar a Modal.setAppElement en algún lugar para accesibilidad\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement('#root');\nconst DefaultValuesManager = () => {\n  _s();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [defaultValues, setDefaultValues] = useState({\n    'Diferencias Pesadas': {\n      'peso': '5'\n    },\n    'Fuzzy': {\n      'threshold': '120'\n    },\n    'Wavelet Entropy': {\n      'wavelet': 'db2',\n      'level': '5'\n    },\n    'High Low Ratio': {\n      'fs': '1.0'\n    },\n    'Filtro Bajo': {\n      'fmin': '0.015',\n      'fmax': '0.05',\n      'at_paso': '1',\n      'at_rechazo': '40',\n      'fs': '1.0'\n    },\n    'Filtro Medio': {\n      'fmin': '0.05',\n      'fmax': '0.25',\n      'at_paso': '1',\n      'at_rechazo': '40',\n      'fs': '1.0'\n    },\n    'Filtro Alto': {\n      'fmin': '0.025',\n      'fmax': '0.4',\n      'at_paso': '1',\n      'at_rechazo': '40',\n      'fs': '1.0'\n    }\n  });\n  const descriptorList = [{\n    name: 'Diferencias Pesadas',\n    params: ['peso']\n  }, {\n    name: 'Fuzzy',\n    params: ['threshold']\n  }, {\n    name: 'Wavelet Entropy',\n    params: ['wavelet', 'level']\n  }, {\n    name: 'High Low Ratio',\n    params: ['fs']\n  }, {\n    name: 'Filtro Bajo',\n    params: ['fmin', 'fmax', 'at_paso', 'at_rechazo', 'fs']\n  }, {\n    name: 'Filtro Medio',\n    params: ['fmin', 'fmax', 'at_paso', 'at_rechazo', 'fs']\n  }, {\n    name: 'Filtro Alto',\n    params: ['fmin', 'fmax', 'at_paso', 'at_rechazo', 'fs']\n  }];\n\n  // Función para abrir/cerrar el modal\n  const toggleModal = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  // Función para guardar los nuevos valores por defecto desde el modal\n  const handleSaveDefaultValues = newDefaultValues => {\n    setDefaultValues(newDefaultValues); // Actualizamos los valores por defecto\n    toggleModal(); // Cerrar el modal después de guardar\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleModal,\n      children: \"Actualizar valores por defecto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: toggleModal,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Modificar valores por defecto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DescriptorSelection, {\n        descriptorList: descriptorList // Pasamos la lista de descriptores\n        ,\n        selectedDescriptors: defaultValues // Pasamos los valores por defecto como seleccionados\n        ,\n        descriptorParams: defaultValues // También puedes usar los mismos valores para los parámetros\n        ,\n        onDescriptorChange: e => {\n          // Lógica para manejar el cambio de descriptores\n        },\n        onParamChange: (descriptorName, param, value) => {\n          // Actualiza el estado de defaultValues\n          setDefaultValues(prevValues => ({\n            ...prevValues,\n            [descriptorName]: {\n              ...prevValues[descriptorName],\n              [param]: value\n            }\n          }));\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSaveDefaultValues(defaultValues),\n        children: \"Guardar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleModal,\n        children: \"Cerrar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(DefaultValuesManager, \"upDm0o/OGMg+/cH7UIYDryV3mo8=\");\n_c = DefaultValuesManager;\nexport default DefaultValuesManager;\nvar _c;\n$RefreshReg$(_c, \"DefaultValuesManager\");","map":{"version":3,"names":["React","useState","DescriptorSelection","Modal","jsxDEV","_jsxDEV","setAppElement","DefaultValuesManager","_s","isModalOpen","setIsModalOpen","defaultValues","setDefaultValues","descriptorList","name","params","toggleModal","handleSaveDefaultValues","newDefaultValues","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","onRequestClose","selectedDescriptors","descriptorParams","onDescriptorChange","e","onParamChange","descriptorName","param","value","prevValues","_c","$RefreshReg$"],"sources":["C:/Users/Igna/Documents/GitHub/Speckle/frontend/src/DefaultValuesManager.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport DescriptorSelection from './DescriptorSelection'; // Asegúrate de importar el componente correcto\r\nimport Modal from 'react-modal';\r\n\r\n// Asegúrate de llamar a Modal.setAppElement en algún lugar para accesibilidad\r\nModal.setAppElement('#root');\r\n\r\nconst DefaultValuesManager = () => {\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [defaultValues, setDefaultValues] = useState({\r\n        'Diferencias Pesadas': { 'peso': '5' },\r\n        'Fuzzy': { 'threshold': '120' },\r\n        'Wavelet Entropy': { 'wavelet': 'db2', 'level': '5' },\r\n        'High Low Ratio': { 'fs': '1.0' },\r\n        'Filtro Bajo': { 'fmin': '0.015', 'fmax': '0.05', 'at_paso': '1', 'at_rechazo': '40', 'fs': '1.0' },\r\n        'Filtro Medio': { 'fmin': '0.05', 'fmax': '0.25', 'at_paso': '1', 'at_rechazo': '40', 'fs': '1.0' },\r\n        'Filtro Alto': { 'fmin': '0.025', 'fmax': '0.4', 'at_paso': '1', 'at_rechazo': '40', 'fs': '1.0' },\r\n    });\r\n\r\n    const descriptorList = [\r\n        { name: 'Diferencias Pesadas', params: ['peso'] },\r\n        { name: 'Fuzzy', params: ['threshold'] },\r\n        { name: 'Wavelet Entropy', params: ['wavelet', 'level'] },\r\n        { name: 'High Low Ratio', params: ['fs'] },\r\n        { name: 'Filtro Bajo', params: ['fmin', 'fmax', 'at_paso', 'at_rechazo', 'fs'] },\r\n        { name: 'Filtro Medio', params: ['fmin', 'fmax', 'at_paso', 'at_rechazo', 'fs'] },\r\n        { name: 'Filtro Alto', params: ['fmin', 'fmax', 'at_paso', 'at_rechazo', 'fs'] },\r\n    ];\r\n\r\n    // Función para abrir/cerrar el modal\r\n    const toggleModal = () => {\r\n        setIsModalOpen(!isModalOpen);\r\n    };\r\n\r\n    // Función para guardar los nuevos valores por defecto desde el modal\r\n    const handleSaveDefaultValues = (newDefaultValues) => {\r\n        setDefaultValues(newDefaultValues); // Actualizamos los valores por defecto\r\n        toggleModal(); // Cerrar el modal después de guardar\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {/* Botón para abrir el modal */}\r\n            <button onClick={toggleModal}>Actualizar valores por defecto</button>\r\n\r\n            {/* Modal para modificar los valores por defecto */}\r\n            <Modal isOpen={isModalOpen} onRequestClose={toggleModal}>\r\n                <h2>Modificar valores por defecto</h2>\r\n                <DescriptorSelection \r\n                    descriptorList={descriptorList} // Pasamos la lista de descriptores\r\n                    selectedDescriptors={defaultValues} // Pasamos los valores por defecto como seleccionados\r\n                    descriptorParams={defaultValues} // También puedes usar los mismos valores para los parámetros\r\n                    onDescriptorChange={(e) => {\r\n                        // Lógica para manejar el cambio de descriptores\r\n                    }}\r\n                    onParamChange={(descriptorName, param, value) => {\r\n                        // Actualiza el estado de defaultValues\r\n                        setDefaultValues(prevValues => ({\r\n                            ...prevValues,\r\n                            [descriptorName]: {\r\n                                ...prevValues[descriptorName],\r\n                                [param]: value,\r\n                            },\r\n                        }));\r\n                    }}\r\n                />\r\n                <button onClick={() => handleSaveDefaultValues(defaultValues)}>Guardar</button>\r\n                <button onClick={toggleModal}>Cerrar</button>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DefaultValuesManager;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}