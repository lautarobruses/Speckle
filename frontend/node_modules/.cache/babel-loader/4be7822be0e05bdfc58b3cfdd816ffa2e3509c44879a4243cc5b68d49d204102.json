{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Igna\\\\Documents\\\\GitHub\\\\Speckle\\\\frontend\\\\src\\\\subirVideos.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport Descriptor from './descriptor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadVideo = () => {\n  _s();\n  const [video, setVideo] = useState(null);\n  const [message, setMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [imageUrls, setImageUrls] = useState([]);\n  const [selectedDescriptors, setSelectedDescriptors] = useState({});\n  const [descriptorsVisible, setDescriptorsVisible] = useState(false);\n  const handleFileChange = event => {\n    setVideo(event.target.files[0]);\n    setDescriptorsVisible(true);\n  };\n  const handleDescriptorChange = event => {\n    const {\n      name,\n      checked\n    } = event.target;\n    setSelectedDescriptors(prev => ({\n      ...prev,\n      [name]: checked\n    }));\n  };\n  const handleUpload = async () => {\n    if (!video) {\n      setMessage('Por favor, selecciona un video.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('video', video);\n\n    // Agregar descriptores seleccionados al FormData\n    const descriptors = Object.keys(selectedDescriptors).filter(key => selectedDescriptors[key]);\n    formData.append('descriptors', JSON.stringify(descriptors));\n    setLoading(true);\n    setMessage('');\n    try {\n      const response = await axios.post('http://localhost:5000/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      console.log(response.data);\n      setMessage(response.data.result);\n      setImageUrls(Array.isArray(response.data.imageUrls) ? response.data.imageUrls : []);\n    } catch (error) {\n      console.error('Error uploading video:', error);\n      setMessage('Ha ocurrido un error.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const descriptorList = ['Diferencias Pesadas', 'Diferencias Promediadas', 'Fujii', 'Desviacion Estandar', 'Contraste Temporal', 'Media', 'Autocorrelacion', 'Fuzzy', 'Frecuencia Media', 'Entropia Shannon 1', 'Frecuencia Corte', 'Wavelet Entropy', 'High Low Ratio', 'Energia Filtrada', 'Filtro Bajo', 'Filtro Medio', 'Filtro Alto'];\n  const isAnyDescriptorSelected = Object.values(selectedDescriptors).some(checked => checked);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"video/avi\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), descriptorsVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Selecciona los descriptores:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this), descriptorList.map((descriptor, index) => /*#__PURE__*/_jsxDEV(Descriptor, {\n        name: descriptor,\n        checked: selectedDescriptors[descriptor] || false,\n        onChange: handleDescriptorChange\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 25\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: loading || !descriptorsVisible || !isAnyDescriptorSelected,\n      children: loading ? 'Cargando...' : 'Enviar Descriptores'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 25\n    }, this), imageUrls.length > 0 && imageUrls.map((url, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://localhost:5000${url}`,\n        alt: `Mapa de colores generado ${index}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `http://localhost:5000${url}`,\n        download: true,\n        children: [\"Descargar imagen \", index + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n_s(UploadVideo, \"k+i3yWlU9WAAQT8CeCIdbMfCguk=\");\n_c = UploadVideo;\nexport default UploadVideo;\nvar _c;\n$RefreshReg$(_c, \"UploadVideo\");","map":{"version":3,"names":["React","useState","axios","Descriptor","jsxDEV","_jsxDEV","UploadVideo","_s","video","setVideo","message","setMessage","loading","setLoading","imageUrls","setImageUrls","selectedDescriptors","setSelectedDescriptors","descriptorsVisible","setDescriptorsVisible","handleFileChange","event","target","files","handleDescriptorChange","name","checked","prev","handleUpload","formData","FormData","append","descriptors","Object","keys","filter","key","JSON","stringify","response","post","headers","console","log","data","result","Array","isArray","error","descriptorList","isAnyDescriptorSelected","values","some","children","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","map","descriptor","index","onClick","disabled","length","url","src","alt","href","download","_c","$RefreshReg$"],"sources":["C:/Users/Igna/Documents/GitHub/Speckle/frontend/src/subirVideos.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Descriptor from './descriptor';\r\n\r\nconst UploadVideo = () => {\r\n    const [video, setVideo] = useState(null);\r\n    const [message, setMessage] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [imageUrls, setImageUrls] = useState([]);\r\n    const [selectedDescriptors, setSelectedDescriptors] = useState({});\r\n    const [descriptorsVisible, setDescriptorsVisible] = useState(false);\r\n\r\n    const handleFileChange = (event) => {\r\n        setVideo(event.target.files[0]);\r\n        setDescriptorsVisible(true);\r\n    };\r\n\r\n    const handleDescriptorChange = (event) => {\r\n        const { name, checked } = event.target;\r\n        setSelectedDescriptors((prev) => ({\r\n            ...prev,\r\n            [name]: checked,\r\n        }));\r\n    };\r\n\r\n    const handleUpload = async () => {\r\n\r\n        if (!video) {\r\n            setMessage('Por favor, selecciona un video.');\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n        formData.append('video', video);\r\n\r\n        // Agregar descriptores seleccionados al FormData\r\n        const descriptors = Object.keys(selectedDescriptors).filter(key => selectedDescriptors[key]);\r\n        formData.append('descriptors', JSON.stringify(descriptors));\r\n\r\n        setLoading(true);\r\n        setMessage('');\r\n\r\n\r\n        try {\r\n            const response = await axios.post('http://localhost:5000/upload', formData, {\r\n                headers: { 'Content-Type': 'multipart/form-data' },\r\n            });\r\n            console.log(response.data);\r\n            setMessage(response.data.result);\r\n            setImageUrls(Array.isArray(response.data.imageUrls) ? response.data.imageUrls : []);\r\n        } catch (error) {\r\n            console.error('Error uploading video:', error);\r\n            setMessage('Ha ocurrido un error.');\r\n        } finally {\r\n            setLoading(false); \r\n        }\r\n    };\r\n\r\n    const descriptorList = [\r\n        'Diferencias Pesadas',\r\n        'Diferencias Promediadas',\r\n        'Fujii',\r\n        'Desviacion Estandar',\r\n        'Contraste Temporal',\r\n        'Media',\r\n        'Autocorrelacion',\r\n        'Fuzzy',\r\n        'Frecuencia Media',\r\n        'Entropia Shannon 1',   \r\n        'Frecuencia Corte',\r\n        'Wavelet Entropy',\r\n        'High Low Ratio',\r\n        'Energia Filtrada',\r\n        'Filtro Bajo',\r\n        'Filtro Medio',\r\n        'Filtro Alto',\r\n\r\n    ];\r\n\r\n    const isAnyDescriptorSelected = Object.values(selectedDescriptors).some(checked => checked);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"file\" accept=\"video/avi\" onChange={handleFileChange} />\r\n            {descriptorsVisible && (\r\n                <div>\r\n                    <h3>Selecciona los descriptores:</h3>\r\n                    {descriptorList.map((descriptor, index) => (\r\n                        <Descriptor \r\n                            key={index} \r\n                            name={descriptor} \r\n                            checked={selectedDescriptors[descriptor] || false} \r\n                            onChange={handleDescriptorChange} \r\n                        />\r\n                    ))}\r\n                </div>\r\n            )}\r\n            <button onClick={handleUpload} disabled={loading || !descriptorsVisible || !isAnyDescriptorSelected}>\r\n                {loading ? 'Cargando...' : 'Enviar Descriptores'}\r\n            </button>\r\n            {message && <p>{message}</p>}\r\n            {imageUrls.length > 0 && imageUrls.map((url, index) => (\r\n                <div key={index}>\r\n                    <img src={`http://localhost:5000${url}`} alt={`Mapa de colores generado ${index}`} />\r\n                    <a href={`http://localhost:5000${url}`} download>Descargar imagen {index + 1}</a>\r\n                </div>\r\n))}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UploadVideo;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}