{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Igna\\\\Documents\\\\GitHub\\\\Speckle\\\\frontend\\\\src\\\\subirVideos.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport Descriptor from './descriptor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadVideo = () => {\n  _s();\n  const [video, setVideo] = useState(null);\n  const [message, setMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [imageUrl, setImageUrl] = useState('');\n  const [selectedDescriptors, setSelectedDescriptors] = useState({});\n  const [descriptorsVisible, setDescriptorsVisible] = useState(false);\n  const handleFileChange = event => {\n    setVideo(event.target.files[0]);\n    setDescriptorsVisible(true);\n  };\n  const handleDescriptorChange = event => {\n    const {\n      name,\n      checked\n    } = event.target;\n    setSelectedDescriptors(prev => ({\n      ...prev,\n      [name]: checked\n    }));\n  };\n  const handleUpload = async () => {\n    const formData = new FormData();\n    formData.append('video', video);\n\n    // Agregar descriptores seleccionados al FormData\n    const descriptors = Object.keys(selectedDescriptors).filter(key => selectedDescriptors[key]);\n    formData.append('descriptors', JSON.stringify(descriptors));\n    setLoading(true);\n    try {\n      const response = await axios.post('http://localhost:5000/upload', formData);\n      setMessage(response.data.result);\n      setImageUrl(response.data.imageUrl);\n    } catch (error) {\n      console.error('Error uploading video:', error);\n      setMessage('Ha ocurrido un error.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const descriptorList = ['Descriptor 1', 'Descriptor 2', 'Descriptor 3'];\n  const isAnyDescriptorSelected = Object.values(selectedDescriptors).some(checked => checked);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"video/avi\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), descriptorsVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Selecciona los descriptores:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this), descriptorList.map((descriptor, index) => /*#__PURE__*/_jsxDEV(Descriptor, {\n        name: descriptor,\n        checked: selectedDescriptors[descriptor] || false,\n        onChange: handleDescriptorChange\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 25\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: loading || !descriptorsVisible || !isAnyDescriptorSelected,\n      children: loading ? 'Cargando...' : 'Enviar Descriptores'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 25\n    }, this), imageUrls.length > 0 && imageUrls.map((url, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://localhost:5000${url}`,\n        alt: `Mapa de colores generado ${index}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `http://localhost:5000${url}`,\n        download: true,\n        children: [\"Descargar imagen \", index + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n_s(UploadVideo, \"IblSAuLSUjDl+ereDK1MiWeVruo=\");\n_c = UploadVideo;\nexport default UploadVideo;\nvar _c;\n$RefreshReg$(_c, \"UploadVideo\");","map":{"version":3,"names":["React","useState","axios","Descriptor","jsxDEV","_jsxDEV","UploadVideo","_s","video","setVideo","message","setMessage","loading","setLoading","imageUrl","setImageUrl","selectedDescriptors","setSelectedDescriptors","descriptorsVisible","setDescriptorsVisible","handleFileChange","event","target","files","handleDescriptorChange","name","checked","prev","handleUpload","formData","FormData","append","descriptors","Object","keys","filter","key","JSON","stringify","response","post","data","result","error","console","descriptorList","isAnyDescriptorSelected","values","some","children","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","map","descriptor","index","onClick","disabled","imageUrls","length","url","src","alt","href","download","_c","$RefreshReg$"],"sources":["C:/Users/Igna/Documents/GitHub/Speckle/frontend/src/subirVideos.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Descriptor from './descriptor';\r\n\r\nconst UploadVideo = () => {\r\n    const [video, setVideo] = useState(null);\r\n    const [message, setMessage] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [imageUrl, setImageUrl] = useState('');\r\n    const [selectedDescriptors, setSelectedDescriptors] = useState({});\r\n    const [descriptorsVisible, setDescriptorsVisible] = useState(false);\r\n\r\n    const handleFileChange = (event) => {\r\n        setVideo(event.target.files[0]);\r\n        setDescriptorsVisible(true);\r\n    };\r\n\r\n    const handleDescriptorChange = (event) => {\r\n        const { name, checked } = event.target;\r\n        setSelectedDescriptors((prev) => ({\r\n            ...prev,\r\n            [name]: checked,\r\n        }));\r\n    };\r\n\r\n    const handleUpload = async () => {\r\n\r\n        const formData = new FormData();\r\n        formData.append('video', video);\r\n\r\n        // Agregar descriptores seleccionados al FormData\r\n        const descriptors = Object.keys(selectedDescriptors).filter(key => selectedDescriptors[key]);\r\n        formData.append('descriptors', JSON.stringify(descriptors));\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await axios.post('http://localhost:5000/upload', formData);\r\n            setMessage(response.data.result);\r\n            setImageUrl(response.data.imageUrl);\r\n        } catch (error) {\r\n            console.error('Error uploading video:', error);\r\n            setMessage('Ha ocurrido un error.');\r\n        } finally {\r\n            setLoading(false); \r\n        }\r\n    };\r\n\r\n    const descriptorList = [\r\n        'Descriptor 1',\r\n        'Descriptor 2',\r\n        'Descriptor 3',\r\n    ];\r\n\r\n    const isAnyDescriptorSelected = Object.values(selectedDescriptors).some(checked => checked);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"file\" accept=\"video/avi\" onChange={handleFileChange} />\r\n            {descriptorsVisible && (\r\n                <div>\r\n                    <h3>Selecciona los descriptores:</h3>\r\n                    {descriptorList.map((descriptor, index) => (\r\n                        <Descriptor \r\n                            key={index} \r\n                            name={descriptor} \r\n                            checked={selectedDescriptors[descriptor] || false} \r\n                            onChange={handleDescriptorChange} \r\n                        />\r\n                    ))}\r\n                </div>\r\n            )}\r\n            <button onClick={handleUpload} disabled={loading || !descriptorsVisible || !isAnyDescriptorSelected}>\r\n                {loading ? 'Cargando...' : 'Enviar Descriptores'}\r\n            </button>\r\n            {message && <p>{message}</p>}\r\n            {imageUrls.length > 0 && imageUrls.map((url, index) => (\r\n                <div key={index}>\r\n                    <img src={`http://localhost:5000${url}`} alt={`Mapa de colores generado ${index}`} />\r\n                    <a href={`http://localhost:5000${url}`} download>Descargar imagen {index + 1}</a>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UploadVideo;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}