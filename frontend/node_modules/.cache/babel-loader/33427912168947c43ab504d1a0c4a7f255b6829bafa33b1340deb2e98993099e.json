{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Igna\\\\Documents\\\\GitHub\\\\Speckle\\\\frontend\\\\src\\\\subirVideos.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport Descriptor from './descriptor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadVideo = () => {\n  _s();\n  const [video, setVideo] = useState(null);\n  const [message, setMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [imageUrls, setImageUrls] = useState([]);\n  const [selectedDescriptors, setSelectedDescriptors] = useState({});\n  const [descriptorsVisible, setDescriptorsVisible] = useState(false);\n  const [descriptorParams, setDescriptorParams] = useState({});\n  const handleFileChange = event => {\n    setVideo(event.target.files[0]);\n    setDescriptorsVisible(true);\n  };\n  const handleDescriptorChange = event => {\n    const {\n      name,\n      checked\n    } = event.target;\n    setSelectedDescriptors(prev => ({\n      ...prev,\n      [name]: checked\n    }));\n\n    // Si el descriptor es seleccionado, establecer valores por defecto\n    if (checked && defaultValues[name]) {\n      setDescriptorParams(prev => ({\n        ...prev,\n        [name]: defaultValues[name]\n      }));\n    } else if (!checked) {\n      // Reset parameters when descriptor is unchecked\n      setDescriptorParams(prev => ({\n        ...prev,\n        [name]: {}\n      }));\n    }\n  };\n  const handleParamChange = (descriptor, param, value) => {\n    setDescriptorParams(prev => ({\n      ...prev,\n      [descriptor]: {\n        ...prev[descriptor],\n        [param]: value\n      }\n    }));\n  };\n  const handleUpload = async () => {\n    if (!video) {\n      setMessage('Por favor, selecciona un video.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('video', video);\n\n    // Agregar descriptores seleccionados al FormData\n    const descriptors = Object.keys(selectedDescriptors).filter(key => selectedDescriptors[key]);\n    formData.append('descriptors', JSON.stringify(descriptors));\n    formData.append('params', JSON.stringify(descriptorParams));\n    setLoading(true);\n    setMessage('');\n    try {\n      console.log(\"Se envío el descriptor: \" + JSON.stringify(descriptors) + \" con los parámetros: \" + JSON.stringify(descriptorParams));\n      const response = await axios.post('http://localhost:5000/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      console.log(response.data);\n      setMessage(response.data.result);\n      setImageUrls(Array.isArray(response.data.images) ? response.data.images : []);\n    } catch (error) {\n      console.error('Error uploading video:', error);\n      setMessage('Ha ocurrido un error.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const defaultValues = {\n    'Diferencias Pesadas': {\n      'peso': '5'\n    },\n    'Fuzzy': {\n      'threshold': '120'\n    },\n    'Wavelet Entropy': {\n      'level': '5'\n    },\n    'High Low Ratio': {\n      'fs': '1.0'\n    },\n    'Filtro Bajo': {\n      'fmin': '0.015',\n      'fmax': '0.05',\n      'at_paso': '1',\n      'at_rechazo': '40',\n      'fs': '1.0'\n    },\n    'Filtro Medio': {\n      'fmin': '0.005',\n      'fmax': '0.25',\n      'at_paso': '1',\n      'at_rechazo': '40',\n      'fs': '1.0'\n    },\n    'Filtro Alto': {\n      'fmin': '0.025',\n      'fmax': '0.4',\n      'at_paso': '1',\n      'at_rechazo': '40',\n      'fs': '1.0'\n    }\n  };\n  const descriptorList = [{\n    name: 'Diferencias Pesadas',\n    params: ['peso']\n  }, {\n    name: 'Diferencias Promediadas',\n    params: []\n  }, {\n    name: 'Fujii',\n    params: []\n  }, {\n    name: 'Desviacion Estandar',\n    params: []\n  }, {\n    name: 'Contraste Temporal',\n    params: []\n  }, {\n    name: 'Media',\n    params: []\n  }, {\n    name: 'Autocorrelacion',\n    params: []\n  }, {\n    name: 'Fuzzy',\n    params: ['threshold']\n  },\n  // Ejemplo con parámetro \"threshold\"\n  {\n    name: 'Frecuencia Media',\n    params: []\n  }, {\n    name: 'Entropia Shannon',\n    params: []\n  }, {\n    name: 'Frecuencia Corte',\n    params: []\n  }, {\n    name: 'Wavelet Entropy',\n    params: ['level']\n  }, {\n    name: 'High Low Ratio',\n    params: ['fs']\n  }, {\n    name: 'Filtro Bajo',\n    params: ['fmin', 'fmax', 'at_paso', 'at_rechazo', 'fs']\n  }, {\n    name: 'Filtro Medio',\n    params: ['fmin', 'fmax', 'at_paso', 'at_rechazo', 'fs']\n  }, {\n    name: 'Filtro Alto',\n    params: ['fmin', 'fmax', 'at_paso', 'at_rechazo', 'fs']\n  }];\n  const isAnyDescriptorSelected = Object.values(selectedDescriptors).some(checked => checked);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"video/avi\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), descriptorsVisible && descriptorList.map((descriptor, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Descriptor, {\n        name: descriptor.name,\n        checked: selectedDescriptors[descriptor.name] || false,\n        onChange: handleDescriptorChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }, this), selectedDescriptors[descriptor.name] && descriptor.params && descriptor.params.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: descriptor.params.map((param, i) => {\n          var _descriptorParams$des;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [param, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: ((_descriptorParams$des = descriptorParams[descriptor.name]) === null || _descriptorParams$des === void 0 ? void 0 : _descriptorParams$des[param]) || '' // Mostrar valor por defecto o vacío\n              ,\n              onChange: e => handleParamChange(descriptor.name, param, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 37\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 25\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: loading || !descriptorsVisible || !isAnyDescriptorSelected,\n      children: loading ? 'Cargando...' : 'Enviar Descriptores'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 25\n    }, this), imageUrls.length > 0 && imageUrls.map((image, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: image.descriptor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://localhost:5000${image.url}`,\n        alt: `Mapa de colores generado ${index}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `http://localhost:5000${image.url}`,\n        download: true,\n        children: [\"Descargar imagen de \", image.descriptor]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n};\n_s(UploadVideo, \"96xfH1yWyizlXWX3xNmdBap1xmg=\");\n_c = UploadVideo;\nexport default UploadVideo;\nvar _c;\n$RefreshReg$(_c, \"UploadVideo\");","map":{"version":3,"names":["React","useState","axios","Descriptor","jsxDEV","_jsxDEV","UploadVideo","_s","video","setVideo","message","setMessage","loading","setLoading","imageUrls","setImageUrls","selectedDescriptors","setSelectedDescriptors","descriptorsVisible","setDescriptorsVisible","descriptorParams","setDescriptorParams","handleFileChange","event","target","files","handleDescriptorChange","name","checked","prev","defaultValues","handleParamChange","descriptor","param","value","handleUpload","formData","FormData","append","descriptors","Object","keys","filter","key","JSON","stringify","console","log","response","post","headers","data","result","Array","isArray","images","error","descriptorList","params","isAnyDescriptorSelected","values","some","children","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","map","index","length","i","_descriptorParams$des","e","onClick","disabled","image","src","url","alt","href","download","_c","$RefreshReg$"],"sources":["C:/Users/Igna/Documents/GitHub/Speckle/frontend/src/subirVideos.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Descriptor from './descriptor';\r\n\r\nconst UploadVideo = () => {\r\n    const [video, setVideo] = useState(null);\r\n    const [message, setMessage] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [imageUrls, setImageUrls] = useState([]);\r\n    const [selectedDescriptors, setSelectedDescriptors] = useState({});\r\n    const [descriptorsVisible, setDescriptorsVisible] = useState(false);\r\n    const [descriptorParams, setDescriptorParams] = useState({});\r\n    \r\n\r\n    const handleFileChange = (event) => {\r\n        setVideo(event.target.files[0]);\r\n        setDescriptorsVisible(true);\r\n    };\r\n\r\n    const handleDescriptorChange = (event) => {\r\n        const { name, checked } = event.target;\r\n        setSelectedDescriptors((prev) => ({\r\n            ...prev,\r\n            [name]: checked,\r\n        }));\r\n        \r\n        // Si el descriptor es seleccionado, establecer valores por defecto\r\n        if (checked && defaultValues[name]) {\r\n            setDescriptorParams((prev) => ({\r\n                ...prev,\r\n                [name]: defaultValues[name],\r\n            }));\r\n        } else if (!checked) {\r\n            // Reset parameters when descriptor is unchecked\r\n            setDescriptorParams((prev) => ({\r\n                ...prev,\r\n                [name]: {},\r\n            }));\r\n        }\r\n    };\r\n\r\n    const handleParamChange = (descriptor, param, value) => {\r\n        setDescriptorParams((prev) => ({\r\n            ...prev,\r\n            [descriptor]: {\r\n                ...prev[descriptor],\r\n                [param]: value,\r\n            },\r\n        }));\r\n    };\r\n\r\n    const handleUpload = async () => {\r\n        if (!video) {\r\n            setMessage('Por favor, selecciona un video.');\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n        formData.append('video', video);\r\n\r\n        // Agregar descriptores seleccionados al FormData\r\n        const descriptors = Object.keys(selectedDescriptors).filter(key => selectedDescriptors[key]);\r\n        formData.append('descriptors', JSON.stringify(descriptors));\r\n        formData.append('params', JSON.stringify(descriptorParams));\r\n\r\n        setLoading(true);\r\n        setMessage('');\r\n\r\n        try {\r\n            console.log(\"Se envío el descriptor: \" + JSON.stringify(descriptors) + \" con los parámetros: \" + JSON.stringify(descriptorParams));\r\n        \r\n            const response = await axios.post('http://localhost:5000/upload', formData, {\r\n                headers: { 'Content-Type': 'multipart/form-data' },\r\n            });\r\n            console.log(response.data);\r\n            setMessage(response.data.result);\r\n            setImageUrls(Array.isArray(response.data.images) ? response.data.images : []);\r\n        } catch (error) {\r\n            console.error('Error uploading video:', error);\r\n            setMessage('Ha ocurrido un error.');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const defaultValues = {\r\n        'Diferencias Pesadas': { 'peso': '5' }, \r\n        'Fuzzy': { 'threshold': '120' },  \r\n        'Wavelet Entropy': { 'level': '5' },\r\n        'High Low Ratio': { 'fs': '1.0' },\r\n        'Filtro Bajo':{'fmin': '0.015' , 'fmax':'0.05', 'at_paso':'1', 'at_rechazo':'40', 'fs':'1.0'},\r\n        'Filtro Medio':{'fmin': '0.005' , 'fmax':'0.25', 'at_paso':'1', 'at_rechazo':'40', 'fs':'1.0'},\r\n        'Filtro Alto':{'fmin': '0.025' , 'fmax':'0.4', 'at_paso':'1', 'at_rechazo':'40', 'fs':'1.0'},\r\n          \r\n    };\r\n\r\n    const descriptorList = [\r\n        { name: 'Diferencias Pesadas', params: ['peso'] },\r\n        { name: 'Diferencias Promediadas', params: [] },\r\n        { name: 'Fujii', params: [] },\r\n        { name: 'Desviacion Estandar', params: [] },\r\n        { name: 'Contraste Temporal', params: [] },\r\n        { name: 'Media', params: [] },\r\n        { name: 'Autocorrelacion', params: [] },\r\n        { name: 'Fuzzy', params: ['threshold'] },  // Ejemplo con parámetro \"threshold\"\r\n        { name: 'Frecuencia Media', params: [] },\r\n        { name: 'Entropia Shannon', params: [] },\r\n        { name: 'Frecuencia Corte', params: [] },\r\n        { name: 'Wavelet Entropy', params: ['level'] },\r\n        { name: 'High Low Ratio', params: ['fs'] },\r\n        { name: 'Filtro Bajo', params: ['fmin','fmax','at_paso','at_rechazo','fs'] },\r\n        { name: 'Filtro Medio', params: ['fmin','fmax','at_paso','at_rechazo','fs'] },\r\n        { name: 'Filtro Alto', params: ['fmin','fmax','at_paso','at_rechazo','fs'] },\r\n    ];\r\n\r\n    const isAnyDescriptorSelected = Object.values(selectedDescriptors).some(checked => checked);\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"file\" accept=\"video/avi\" onChange={handleFileChange} />\r\n            {descriptorsVisible && descriptorList.map((descriptor, index) => (\r\n                <div key={index}>\r\n                    <Descriptor \r\n                        name={descriptor.name} \r\n                        checked={selectedDescriptors[descriptor.name] || false} \r\n                        onChange={handleDescriptorChange} \r\n                    />\r\n                    {selectedDescriptors[descriptor.name] && descriptor.params && descriptor.params.length > 0 && (\r\n                        <div>\r\n                            {descriptor.params.map((param, i) => (\r\n                                <div key={i}>\r\n                                    <label>{param}:</label>\r\n                                    <input \r\n                                        type=\"text\" \r\n                                        value={descriptorParams[descriptor.name]?.[param] || ''} // Mostrar valor por defecto o vacío\r\n                                        onChange={(e) => handleParamChange(descriptor.name, param, e.target.value)} \r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            ))}\r\n            <button onClick={handleUpload} disabled={loading || !descriptorsVisible || !isAnyDescriptorSelected}>\r\n                {loading ? 'Cargando...' : 'Enviar Descriptores'}\r\n            </button>\r\n            {message && <p>{message}</p>}\r\n            {imageUrls.length > 0 && imageUrls.map((image, index) => (\r\n                <div key={index}>\r\n                    <h5>{image.descriptor}</h5> {/* Título con el nombre del descriptor */}\r\n                    <img src={`http://localhost:5000${image.url}`} alt={`Mapa de colores generado ${index}`} />\r\n                    <a href={`http://localhost:5000${image.url}`} download>Descargar imagen de {image.descriptor}</a>\r\n                </div>\r\n            ))}\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UploadVideo;\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}