{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Igna\\\\Documents\\\\GitHub\\\\Speckle\\\\frontend\\\\src\\\\DescriptorSelection.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DescriptorSelection = ({\n  descriptorList,\n  defaultValues,\n  onSave\n}) => {\n  _s();\n  const [selectedDescriptors, setSelectedDescriptors] = useState({});\n  const [descriptorParams, setDescriptorParams] = useState({});\n  const handleDescriptorChange = event => {\n    const {\n      name,\n      checked\n    } = event.target;\n    setSelectedDescriptors(prev => ({\n      ...prev,\n      [name]: checked\n    }));\n    if (checked && defaultValues[name]) {\n      setDescriptorParams(prev => ({\n        ...prev,\n        [name]: defaultValues[name]\n      }));\n    } else if (!checked) {\n      setDescriptorParams(prev => {\n        const {\n          [name]: _,\n          ...rest\n        } = prev;\n        return rest;\n      });\n    }\n  };\n  const handleParamChange = (descriptor, param, value) => {\n    setDescriptorParams(prev => ({\n      ...prev,\n      [descriptor]: {\n        ...prev[descriptor],\n        [param]: value\n      }\n    }));\n  };\n  const handleSave = () => {\n    onSave(descriptorParams);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [descriptorList.map((descriptor, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: descriptor.name,\n          checked: selectedDescriptors[descriptor.name] || false,\n          onChange: handleDescriptorChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this), descriptor.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this), selectedDescriptors[descriptor.name] && descriptor.params && descriptor.params.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: descriptor.params.map((param, i) => {\n          var _descriptorParams$des;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [param, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: ((_descriptorParams$des = descriptorParams[descriptor.name]) === null || _descriptorParams$des === void 0 ? void 0 : _descriptorParams$des[param]) || '',\n              onChange: e => handleParamChange(descriptor.name, param, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 37\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 25\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSave,\n      children: \"Guardar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(DescriptorSelection, \"CJ/S2ODO+RuDxQmz3hhodVfRS6Q=\");\n_c = DescriptorSelection;\nexport default DescriptorSelection;\nvar _c;\n$RefreshReg$(_c, \"DescriptorSelection\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DescriptorSelection","descriptorList","defaultValues","onSave","_s","selectedDescriptors","setSelectedDescriptors","descriptorParams","setDescriptorParams","handleDescriptorChange","event","name","checked","target","prev","_","rest","handleParamChange","descriptor","param","value","handleSave","children","map","index","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","params","length","i","_descriptorParams$des","e","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Igna/Documents/GitHub/Speckle/frontend/src/DescriptorSelection.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst DescriptorSelection = ({ descriptorList, defaultValues, onSave }) => {\r\n    const [selectedDescriptors, setSelectedDescriptors] = useState({});\r\n    const [descriptorParams, setDescriptorParams] = useState({});\r\n\r\n    const handleDescriptorChange = (event) => {\r\n        const { name, checked } = event.target;\r\n        setSelectedDescriptors((prev) => ({\r\n            ...prev,\r\n            [name]: checked,\r\n        }));\r\n\r\n        if (checked && defaultValues[name]) {\r\n            setDescriptorParams((prev) => ({\r\n                ...prev,\r\n                [name]: defaultValues[name],\r\n            }));\r\n        } else if (!checked) {\r\n            setDescriptorParams((prev) => {\r\n                const { [name]: _, ...rest } = prev;\r\n                return rest;\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleParamChange = (descriptor, param, value) => {\r\n        setDescriptorParams((prev) => ({\r\n            ...prev,\r\n            [descriptor]: {\r\n                ...prev[descriptor],\r\n                [param]: value,\r\n            },\r\n        }));\r\n    };\r\n\r\n    const handleSave = () => {\r\n        onSave(descriptorParams);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {descriptorList.map((descriptor, index) => (\r\n                <div key={index}>\r\n                    <label>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            name={descriptor.name}\r\n                            checked={selectedDescriptors[descriptor.name] || false}\r\n                            onChange={handleDescriptorChange}\r\n                        />\r\n                        {descriptor.name}\r\n                    </label>\r\n                    {selectedDescriptors[descriptor.name] && descriptor.params && descriptor.params.length > 0 && (\r\n                        <div>\r\n                            {descriptor.params.map((param, i) => (\r\n                                <div key={i}>\r\n                                    <label>{param}:</label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        value={descriptorParams[descriptor.name]?.[param] || ''}\r\n                                        onChange={(e) => handleParamChange(descriptor.name, param, e.target.value)}\r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            ))}\r\n            <button onClick={handleSave}>Guardar</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DescriptorSelection;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,mBAAmB,GAAGA,CAAC;EAAEC,cAAc;EAAEC,aAAa;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EACvE,MAAM,CAACC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClE,MAAM,CAACU,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE5D,MAAMY,sBAAsB,GAAIC,KAAK,IAAK;IACtC,MAAM;MAAEC,IAAI;MAAEC;IAAQ,CAAC,GAAGF,KAAK,CAACG,MAAM;IACtCP,sBAAsB,CAAEQ,IAAI,KAAM;MAC9B,GAAGA,IAAI;MACP,CAACH,IAAI,GAAGC;IACZ,CAAC,CAAC,CAAC;IAEH,IAAIA,OAAO,IAAIV,aAAa,CAACS,IAAI,CAAC,EAAE;MAChCH,mBAAmB,CAAEM,IAAI,KAAM;QAC3B,GAAGA,IAAI;QACP,CAACH,IAAI,GAAGT,aAAa,CAACS,IAAI;MAC9B,CAAC,CAAC,CAAC;IACP,CAAC,MAAM,IAAI,CAACC,OAAO,EAAE;MACjBJ,mBAAmB,CAAEM,IAAI,IAAK;QAC1B,MAAM;UAAE,CAACH,IAAI,GAAGI,CAAC;UAAE,GAAGC;QAAK,CAAC,GAAGF,IAAI;QACnC,OAAOE,IAAI;MACf,CAAC,CAAC;IACN;EACJ,CAAC;EAED,MAAMC,iBAAiB,GAAGA,CAACC,UAAU,EAAEC,KAAK,EAAEC,KAAK,KAAK;IACpDZ,mBAAmB,CAAEM,IAAI,KAAM;MAC3B,GAAGA,IAAI;MACP,CAACI,UAAU,GAAG;QACV,GAAGJ,IAAI,CAACI,UAAU,CAAC;QACnB,CAACC,KAAK,GAAGC;MACb;IACJ,CAAC,CAAC,CAAC;EACP,CAAC;EAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACrBlB,MAAM,CAACI,gBAAgB,CAAC;EAC5B,CAAC;EAED,oBACIR,OAAA;IAAAuB,QAAA,GACKrB,cAAc,CAACsB,GAAG,CAAC,CAACL,UAAU,EAAEM,KAAK,kBAClCzB,OAAA;MAAAuB,QAAA,gBACIvB,OAAA;QAAAuB,QAAA,gBACIvB,OAAA;UACI0B,IAAI,EAAC,UAAU;UACfd,IAAI,EAAEO,UAAU,CAACP,IAAK;UACtBC,OAAO,EAAEP,mBAAmB,CAACa,UAAU,CAACP,IAAI,CAAC,IAAI,KAAM;UACvDe,QAAQ,EAAEjB;QAAuB;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpC,CAAC,EACDZ,UAAU,CAACP,IAAI;MAAA;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACb,CAAC,EACPzB,mBAAmB,CAACa,UAAU,CAACP,IAAI,CAAC,IAAIO,UAAU,CAACa,MAAM,IAAIb,UAAU,CAACa,MAAM,CAACC,MAAM,GAAG,CAAC,iBACtFjC,OAAA;QAAAuB,QAAA,EACKJ,UAAU,CAACa,MAAM,CAACR,GAAG,CAAC,CAACJ,KAAK,EAAEc,CAAC;UAAA,IAAAC,qBAAA;UAAA,oBAC5BnC,OAAA;YAAAuB,QAAA,gBACIvB,OAAA;cAAAuB,QAAA,GAAQH,KAAK,EAAC,GAAC;YAAA;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACvB/B,OAAA;cACI0B,IAAI,EAAC,MAAM;cACXL,KAAK,EAAE,EAAAc,qBAAA,GAAA3B,gBAAgB,CAACW,UAAU,CAACP,IAAI,CAAC,cAAAuB,qBAAA,uBAAjCA,qBAAA,CAAoCf,KAAK,CAAC,KAAI,EAAG;cACxDO,QAAQ,EAAGS,CAAC,IAAKlB,iBAAiB,CAACC,UAAU,CAACP,IAAI,EAAEQ,KAAK,EAAEgB,CAAC,CAACtB,MAAM,CAACO,KAAK;YAAE;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC9E,CAAC;UAAA,GANIG,CAAC;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAON,CAAC;QAAA,CACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CACR;IAAA,GAvBKN,KAAK;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAwBV,CACR,CAAC,eACF/B,OAAA;MAAQqC,OAAO,EAAEf,UAAW;MAAAC,QAAA,EAAC;IAAO;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AAEd,CAAC;AAAC1B,EAAA,CAtEIJ,mBAAmB;AAAAqC,EAAA,GAAnBrC,mBAAmB;AAwEzB,eAAeA,mBAAmB;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}